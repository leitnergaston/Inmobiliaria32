
package vista.propietario;

import accesoADatos.*;
import entidades.*;
import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import vista.menuPrincipal.MenuPrincipal;


public class VerPropietarios extends javax.swing.JInternalFrame {
    private final MenuPrincipal menuPrincipal;
    private int aviso = 0;
    private PropietarioData propietarioData = new PropietarioData();
    private FondoPanel fondo = new FondoPanel();
    private DefaultTableModel modelo = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int f, int c){
            return false;
        }
    };
    
    
    public VerPropietarios(MenuPrincipal menuPrincipal) {
        this.setContentPane(fondo);
        initComponents();
        this.menuPrincipal = menuPrincipal;
        cargarTablaInicial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupEstado = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPropietarios = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        campoApellido = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        campoNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        botonVerDetalles = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        campoDni = new javax.swing.JTextField();
        botonBuscarApellido = new javax.swing.JButton();
        botonBuscarNombre = new javax.swing.JButton();
        botonBuscarDni = new javax.swing.JButton();
        radioBTodos = new javax.swing.JRadioButton();
        radioBActivos = new javax.swing.JRadioButton();
        radioBInactivos = new javax.swing.JRadioButton();
        botonBuscarEstado = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ver Propietarios");

        tablaPropietarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaPropietarios);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Filtrar por . . .");

        jLabel3.setText("Apellido");

        campoApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoApellidoKeyTyped(evt);
            }
        });

        jLabel4.setText("Nombre");

        campoNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoNombreKeyTyped(evt);
            }
        });

        jLabel5.setText("Dni");

        botonVerDetalles.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonVerDetalles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconVerDetalles.png"))); // NOI18N
        botonVerDetalles.setText("Ver detalles");
        botonVerDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerDetallesActionPerformed(evt);
            }
        });

        botonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconSalir.png"))); // NOI18N
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        campoDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoDniKeyTyped(evt);
            }
        });

        botonBuscarApellido.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonBuscarApellido.setText("Buscar por apellido");
        botonBuscarApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarApellidoActionPerformed(evt);
            }
        });

        botonBuscarNombre.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonBuscarNombre.setText("Buscar por nombre");
        botonBuscarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarNombreActionPerformed(evt);
            }
        });

        botonBuscarDni.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonBuscarDni.setText("Buscar por dni");
        botonBuscarDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarDniActionPerformed(evt);
            }
        });

        buttonGroupEstado.add(radioBTodos);
        radioBTodos.setSelected(true);
        radioBTodos.setText("Todos");

        buttonGroupEstado.add(radioBActivos);
        radioBActivos.setText("Activos");

        buttonGroupEstado.add(radioBInactivos);
        radioBInactivos.setText("Inactivos");

        botonBuscarEstado.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonBuscarEstado.setText("Buscar por estado");
        botonBuscarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonVerDetalles)
                                .addGap(45, 45, 45)
                                .addComponent(botonSalir)
                                .addGap(113, 113, 113))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(campoDni)
                                            .addComponent(campoNombre)
                                            .addComponent(campoApellido, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(radioBTodos)
                                        .addGap(18, 18, 18)
                                        .addComponent(radioBActivos)
                                        .addGap(18, 18, 18)
                                        .addComponent(radioBInactivos))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(botonBuscarEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonBuscarApellido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonBuscarNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonBuscarDni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBTodos)
                    .addComponent(radioBActivos)
                    .addComponent(radioBInactivos)
                    .addComponent(botonBuscarEstado))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(campoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscarApellido))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscarNombre))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonBuscarDni)
                    .addComponent(campoDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonSalir)
                    .addComponent(botonVerDetalles))
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        dispose();
        menuPrincipal.mostrarItemsEscritorio();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void botonBuscarApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarApellidoActionPerformed
        ArrayList<Propietario> propietarios;
        
        if(campoApellido.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Debe ingresar un apellido para poder buscar los propietarios");
            eliminarFilas();
        }else{
            String apellido = campoApellido.getText()+"%";
            propietarios = propietarioData.listarPropietariosPorApellido(apellido);
            if(propietarios.isEmpty()){
                JOptionPane.showMessageDialog(this, "No se ha encontrado ningún propietario");
                radioBTodos.setSelected(true);
                campoNombre.setText("");
                campoDni.setText("");
                eliminarFilas();
            }else{
                eliminarFilas();
                for(Propietario propietario: propietarios){
                    cargarFila(propietario);
                }
                radioBTodos.setSelected(true);
                campoNombre.setText("");
                campoDni.setText("");
            }
        }
    }//GEN-LAST:event_botonBuscarApellidoActionPerformed

    private void botonBuscarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarEstadoActionPerformed
        ArrayList<Propietario> propietarios;
        
        if(radioBTodos.isSelected()){
            propietarios = propietarioData.listarPropietarios();
            if(propietarios.isEmpty()){
                JOptionPane.showMessageDialog(this, "Todavía no se ha cargado ningún propietario");
                vaciarTodo();
            }
            else{
                eliminarFilas();
                for(Propietario propietario : propietarios){
                    cargarFila(propietario);
                }
                campoApellido.setText("");
                campoNombre.setText("");
                campoDni.setText("");
            }
        }else{
            boolean estado = radioBActivos.isSelected();
            propietarios = propietarioData.listarPropietariosActivosONo(estado);
            if(estado==true && propietarios.isEmpty()){
                JOptionPane.showMessageDialog(this, "No existe ningún propietario activo en este momento");
                campoApellido.setText("");
                campoNombre.setText("");
                campoDni.setText("");
                eliminarFilas();
            }
            else if(estado==false && propietarios.isEmpty()){
                JOptionPane.showMessageDialog(this, "No existe ningún propietario inactivo");
                campoApellido.setText("");
                campoNombre.setText("");
                campoDni.setText("");
                eliminarFilas();
            }
            else{
                eliminarFilas();
                for(Propietario propietario : propietarios){
                    cargarFila(propietario);
                }
                campoApellido.setText("");
                campoNombre.setText("");
                campoDni.setText("");
            }
        } 
    }//GEN-LAST:event_botonBuscarEstadoActionPerformed

    private void botonBuscarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarNombreActionPerformed
        ArrayList<Propietario> propietarios;
        
        if(campoNombre.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Debe ingresar un nombre para poder buscar los propietarios");
            eliminarFilas();
        }else{
            String nombre = campoNombre.getText()+"%";
            propietarios = propietarioData.listarPropietariosPorNombre(nombre);
            if(propietarios.isEmpty()){
                JOptionPane.showMessageDialog(this, "No se ha encontrado ningún propietario");
                radioBTodos.setSelected(true);
                campoApellido.setText("");
                campoDni.setText("");
                eliminarFilas();
            }else{
                eliminarFilas();
                for(Propietario propietario: propietarios){
                    cargarFila(propietario);
                }
                radioBTodos.setSelected(true);
                campoApellido.setText("");
                campoDni.setText("");
            }
        }
    }//GEN-LAST:event_botonBuscarNombreActionPerformed

    private void campoDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoDniKeyTyped
        int key = evt.getKeyChar();
        boolean numero = key >= 48 && key <= 57 || key == 8;
        if (!numero) {
            evt.consume();
            aviso++;
            if (aviso == 5) {
                JOptionPane.showMessageDialog(this, "Solo se permiten numeros en este campo");
                aviso = 0;
            }
        }
    }//GEN-LAST:event_campoDniKeyTyped

    private void botonBuscarDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarDniActionPerformed
        Propietario propietario;
        
        if(campoDni.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Debe ingresar el dni del propietario que desea buscar");
            eliminarFilas();
        }else{
            int dni = Integer.parseInt(campoDni.getText());
            propietario = propietarioData.buscarPropietarioPorDni(dni);
            if(propietario == null){
                JOptionPane.showMessageDialog(this, "No existe ningún propietario con ese dni");
                eliminarFilas();
                radioBTodos.setSelected(true);
                campoApellido.setText("");
                campoNombre.setText("");
            }else{
                eliminarFilas();
                cargarFila(propietario);
            }
            
        }
    }//GEN-LAST:event_botonBuscarDniActionPerformed

    private void botonVerDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerDetallesActionPerformed
        try{
            String estado;
            int filaSeleccionada = tablaPropietarios.getSelectedRow();
            int idPropietario = (int)tablaPropietarios.getValueAt(filaSeleccionada, 0);
            Propietario propietario = propietarioData.buscarPropietarioPorId(idPropietario);
            
            if(propietario.isEstado()){
                estado = "Activo";
            }else{
                estado = "Inactivo";
            }
            
            String detalles = "ID: "+propietario.getIdPropietario()+"\n"
                    + "Dni: "+propietario.getDni()+"\n"
                    + "Apellido: "+propietario.getApellido()+"\n"
                    + "Nombre: "+propietario.getNombre()+"\n"
                    + "Domicilio: "+propietario.getDomicilio()+"\n"
                    + "Teléfono: "+propietario.getTelefono()+"\n"
                    + "Mail: "+propietario.getMail()+"\n"
                    + "Estado: "+estado;
            
            JOptionPane.showMessageDialog(null, detalles, "Detalles del propietario", JOptionPane.INFORMATION_MESSAGE);
            
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un propietario para poder ver sus detalles");
        }
    }//GEN-LAST:event_botonVerDetallesActionPerformed

    private void campoApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoApellidoKeyTyped
        int key = evt.getKeyChar();
        boolean numero = key >= 65 && key <= 90 || key >= 97 && key <= 122 || key == 8 || key == 32;
        if (!numero) {
            evt.consume();
            aviso++;
            if (aviso == 10) {
                JOptionPane.showMessageDialog(this, "Solo se permiten letras en este campo");
                aviso = 0;
            }
        }
    }//GEN-LAST:event_campoApellidoKeyTyped

    private void campoNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoNombreKeyTyped
        int key = evt.getKeyChar();
        boolean numero = key >= 65 && key <= 90 || key >= 97 && key <= 122 || key == 8 || key == 32;
        if (!numero) {
            evt.consume();
            aviso++;
            if (aviso == 10) {
                JOptionPane.showMessageDialog(this, "Solo se permiten letras en este campo");
                aviso = 0;
            }
        }
    }//GEN-LAST:event_campoNombreKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscarApellido;
    private javax.swing.JButton botonBuscarDni;
    private javax.swing.JButton botonBuscarEstado;
    private javax.swing.JButton botonBuscarNombre;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton botonVerDetalles;
    private javax.swing.ButtonGroup buttonGroupEstado;
    private javax.swing.JTextField campoApellido;
    private javax.swing.JTextField campoDni;
    private javax.swing.JTextField campoNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioBActivos;
    private javax.swing.JRadioButton radioBInactivos;
    private javax.swing.JRadioButton radioBTodos;
    private javax.swing.JTable tablaPropietarios;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaInicial(){
        modelo.addColumn("Id");
        modelo.addColumn("Dni");
        modelo.addColumn("Apellido");
        modelo.addColumn("Nombre");
        
        tablaPropietarios.setModel(modelo);
        
        ArrayList<Propietario> propietarios = propietarioData.listarPropietarios();
        for(Propietario propietario : propietarios){
            cargarFila(propietario);
        }
    }
    
    private void cargarFila(Propietario propietario){
        modelo.addRow(new Object[]{
            propietario.getIdPropietario(),
            propietario.getDni(),
            propietario.getApellido(),
            propietario.getNombre()});
        
    }
    
    private void eliminarFilas() {
        int filas = tablaPropietarios.getRowCount() - 1;
        if (filas > -1) {
            for (; filas >= 0; filas--) {
                modelo.removeRow(filas);
            }
        }
    }
    
    private void vaciarTodo(){
        radioBTodos.setSelected(true);
        campoApellido.setText("");
        campoNombre.setText("");
        campoDni.setText("");
        eliminarFilas();
    }
    
    private class FondoPanel extends JPanel{
    
        private Image imagen;
        
        @Override
        public void paint(Graphics g){
            imagen = new ImageIcon(getClass().getResource("/images/fondo4.jpg")).getImage();
            g.drawImage(imagen,0,0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        
        }
    
    }  
}
