/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.inmueble;

import accesoADatos.*;
import entidades.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import vista.menuPrincipal.MenuPrincipal;

/**
 *
 * @author ale77
 */
public class VerInmuebles extends javax.swing.JInternalFrame {
    private final MenuPrincipal menuPrincipal;
    private InmuebleData inmuebleData= new InmuebleData();
    private PropietarioData propietarioData = new PropietarioData();
    private int aviso = 0;
    private DefaultTableModel modelo = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int f, int c){
            return false;
        }
    };
    
    public VerInmuebles(MenuPrincipal menuPrincipal) {
        initComponents();
        this.menuPrincipal = menuPrincipal;
        cargarTablaInicial();
        cargarComboPropietario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoFiltro = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        botonBuscarDireccion = new javax.swing.JButton();
        campoId = new javax.swing.JTextField();
        botonBuscarPropietario = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        campoDireccion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        radioBNoDisponibles = new javax.swing.JRadioButton();
        radioBTodos = new javax.swing.JRadioButton();
        botonVerDetalles = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        botonSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInmuebles = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        radioBDisponibles = new javax.swing.JRadioButton();
        botonBuscarId = new javax.swing.JButton();
        comboPropietario = new javax.swing.JComboBox<>();
        botonBuscar = new javax.swing.JButton();

        jLabel3.setText("Id");

        botonBuscarDireccion.setText("Buscar por direccion");
        botonBuscarDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarDireccionActionPerformed(evt);
            }
        });

        campoId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoIdKeyTyped(evt);
            }
        });

        botonBuscarPropietario.setText("Buscar por propietario");
        botonBuscarPropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarPropietarioActionPerformed(evt);
            }
        });

        jLabel4.setText("Direcci√≥n");

        jLabel5.setText("Propietario");

        grupoFiltro.add(radioBNoDisponibles);
        radioBNoDisponibles.setText("No disponibles");

        grupoFiltro.add(radioBTodos);
        radioBTodos.setSelected(true);
        radioBTodos.setText("Todos");
        radioBTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBTodosActionPerformed(evt);
            }
        });

        botonVerDetalles.setText("Ver detalles");
        botonVerDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerDetallesActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ver Inmuebles");

        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        tablaInmuebles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaInmuebles);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Filtrar por . . .");

        grupoFiltro.add(radioBDisponibles);
        radioBDisponibles.setText("Disponibles");

        botonBuscarId.setText("Buscar por Id");
        botonBuscarId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarIdActionPerformed(evt);
            }
        });

        botonBuscar.setText("Buscar por disponibilidad");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(botonVerDetalles)
                        .addGap(122, 122, 122)
                        .addComponent(botonSalir)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(radioBDisponibles)
                        .addGap(18, 18, 18)
                        .addComponent(radioBNoDisponibles)
                        .addGap(31, 31, 31)
                        .addComponent(botonBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(radioBTodos)
                                .addGap(9, 9, 9)))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(campoDireccion)
                            .addComponent(comboPropietario, 0, 172, Short.MAX_VALUE)
                            .addComponent(campoId))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonBuscarId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonBuscarPropietario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonBuscarDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(96, 96, 96))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBTodos)
                    .addComponent(radioBDisponibles)
                    .addComponent(radioBNoDisponibles)
                    .addComponent(botonBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscarId))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonBuscarDireccion)
                    .addComponent(jLabel4)
                    .addComponent(campoDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonBuscarPropietario)
                    .addComponent(jLabel5)
                    .addComponent(comboPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonVerDetalles)
                    .addComponent(botonSalir))
                .addGap(67, 67, 67))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioBTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBTodosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBTodosActionPerformed

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        dispose();
        menuPrincipal.mostrarItemsEscritorio();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void botonBuscarIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarIdActionPerformed
        
        try{
           int id = Integer.parseInt(campoId.getText());
           Inmueble inmueble = inmuebleData.buscarInmueble(id);
           
           if(inmueble == null){
               JOptionPane.showMessageDialog(this, "No existe ning√∫n inmueble con esa Id");
               eliminarFilas();
               radioBTodos.setSelected(true);
               campoDireccion.setText("");
               comboPropietario.setSelectedIndex(0);
           }else{
               eliminarFilas();
               cargarFila(inmueble);
               radioBTodos.setSelected(true);
               campoDireccion.setText("");
               comboPropietario.setSelectedIndex(0);
           }
           
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Ingrese el id del inmueble que desea buscar");
        }
    }//GEN-LAST:event_botonBuscarIdActionPerformed

    private void botonBuscarPropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarPropietarioActionPerformed
        
        if(comboPropietario.getSelectedIndex()<1){
            JOptionPane.showMessageDialog(this, "Ingrese un propietario para buscar sus inmuebles");
            vaciarTodo();
        }else{
            Propietario propietario = (Propietario)comboPropietario.getSelectedItem();
            ArrayList<Inmueble> inmuebles = inmuebleData.listarInmueblesPorPropietario(propietario.getIdPropietario());
            
            if(inmuebles.isEmpty()){
                JOptionPane.showMessageDialog(this, "Ese propietario no ha registrado ning√∫n inmueble");  
                eliminarFilas();
                radioBTodos.setSelected(true);
                campoId.setText("");
                campoDireccion.setText("");
            }else{
                eliminarFilas();
                for(Inmueble inmueble: inmuebles){
                    cargarFila(inmueble);
                    radioBTodos.setSelected(true);
                    campoId.setText("");
                    campoDireccion.setText("");
                }
            }
        }
        
    }//GEN-LAST:event_botonBuscarPropietarioActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        
        ArrayList<Inmueble> inmuebles;
                
        if(radioBTodos.isSelected()){
            inmuebles = inmuebleData.listarInmuebles();
            if(inmuebles.isEmpty()){
                JOptionPane.showMessageDialog(this, "No se ha cargado ning√∫n inmueble todav√≠a");
                vaciarTodo();
            }else{    
                eliminarFilas();
                for(Inmueble inmueble : inmuebles){
                    cargarFila(inmueble);
                }
            }    
        }else{
            boolean disponible = radioBDisponibles.isSelected();
            inmuebles = inmuebleData.listarInmueblesDisponiblesONo(disponible);
            if(disponible==true && inmuebles.isEmpty()){
                JOptionPane.showMessageDialog(this, "No existe ning√∫n inmueble disponible en este momento");
                campoId.setText("");
                campoDireccion.setText("");
                comboPropietario.setSelectedIndex(0);
                eliminarFilas();
            }else if(disponible==false && inmuebles.isEmpty()){
                JOptionPane.showMessageDialog(this, "No existe ning√∫n inmueble NO disponible en este momento");
                campoId.setText("");
                campoDireccion.setText("");
                comboPropietario.setSelectedIndex(0);
                eliminarFilas();
            }else{
                eliminarFilas();
                for(Inmueble inmueble : inmuebles){
                    cargarFila(inmueble);
                }
                campoId.setText("");
                campoDireccion.setText("");
                comboPropietario.setSelectedIndex(0);
            }
        }    
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void campoIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIdKeyTyped
        int key = evt.getKeyChar();
        boolean numero = key >= 48 && key <= 57 || key == 8;
        if (!numero) {
            evt.consume();
            aviso++;
            if (aviso == 5) {
                JOptionPane.showMessageDialog(this, "Solo se permiten numeros en este campo");
                aviso = 0;
            }
        }
    }//GEN-LAST:event_campoIdKeyTyped

    private void botonBuscarDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarDireccionActionPerformed
        
        if(campoDireccion.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Ingrese una direcci√≥n para buscar inmuebles");
            vaciarTodo();
        }else{
            String direccion = campoDireccion.getText()+"%";
            ArrayList<Inmueble> inmuebles = inmuebleData.buscarInmueblePorDireccion(direccion);
            
            if(inmuebles.isEmpty()){
                JOptionPane.showMessageDialog(this, "No existe ning√∫n inmueble con esa direcci√≥n");
                eliminarFilas();
                radioBTodos.setSelected(true);
                campoId.setText("");
                comboPropietario.setSelectedIndex(0);
            }else{
                eliminarFilas();
                for(Inmueble inmueble : inmuebles){
                    cargarFila(inmueble);
                }
                radioBTodos.setSelected(true);
                campoId.setText("");
                comboPropietario.setSelectedIndex(0);
            }    
        }
    }//GEN-LAST:event_botonBuscarDireccionActionPerformed

    private void botonVerDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerDetallesActionPerformed

        try {
            String nombrePropietario, apellidoPropietario = "", nombreInquilino, apellidoInquilino = "", disponible;
            
            int filaSeleccionada = tablaInmuebles.getSelectedRow();

            int idInmueble = (int) tablaInmuebles.getValueAt(filaSeleccionada, 0);
            InmuebleData inmData = new InmuebleData();
            Inmueble inmueble = inmData.buscarInmueble(idInmueble);

            if (inmueble.getPropietario() != null) {
                nombrePropietario = inmueble.getPropietario().getNombre();
                apellidoPropietario = inmueble.getPropietario().getApellido();
                
            } else {
                nombrePropietario = "Sin propietario";
            }
            
            if(inmueble.getInquilino() != null) {
                nombreInquilino = inmueble.getInquilino().getNombre();
                apellidoInquilino = inmueble.getInquilino().getApellido();
            } else {
                nombreInquilino = "Sin Inquilino";
            }
            
            if (inmueble.isDisponible()) {
                disponible = "Si";
            } else {
                disponible = "No";
            }
            
            String detalles = "ID: " + Integer.toString(inmueble.getIdInmueble())+ "\n"
                    + "Tipo: " + inmueble.getTipo() + "\n"
                    + "Superficie: " + inmueble.getSuperficie() + " m¬≤\n"
                    + "Precio: $" + inmueble.getPrecio() + "\n"
                    + "Zona: " + inmueble.getZona() + "\n"
                    + "Direccion: " + inmueble.getDireccion() + "\n"
                    + "Propietario: " + nombrePropietario + " " + apellidoPropietario + "\n"
                    + "Inquilino: " + nombreInquilino + " " + apellidoInquilino + "\n"
                    + "Disponible: " + disponible;
            JOptionPane.showMessageDialog(null, detalles, "Detalles del inmueble", JOptionPane.INFORMATION_MESSAGE);

        //} catch (NullPointerException ex) {

        }catch (ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un inmueble para poder ver sus detalles");
        }

    }//GEN-LAST:event_botonVerDetallesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonBuscarDireccion;
    private javax.swing.JButton botonBuscarId;
    private javax.swing.JButton botonBuscarPropietario;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton botonVerDetalles;
    private javax.swing.JTextField campoDireccion;
    private javax.swing.JTextField campoId;
    private javax.swing.JComboBox<Propietario> comboPropietario;
    private javax.swing.ButtonGroup grupoFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioBDisponibles;
    private javax.swing.JRadioButton radioBNoDisponibles;
    private javax.swing.JRadioButton radioBTodos;
    private javax.swing.JTable tablaInmuebles;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaInicial(){
        modelo.addColumn("Id");
        modelo.addColumn("Direcci√≥n");
        modelo.addColumn("Propietario");
        modelo.addColumn("Zona");
        modelo.addColumn("Tipo");
        
        tablaInmuebles.setModel(modelo);
        
        ArrayList<Inmueble> inmuebles = inmuebleData.listarInmuebles();
        
        for(Inmueble inmueble : inmuebles){
            cargarFila(inmueble);
        }
    }

    private void cargarFila(Inmueble inmueble){
        if(inmueble.getPropietario()==null){
            modelo.addRow(new Object[]{
            inmueble.getIdInmueble(),
            inmueble.getDireccion(),
            "Sin propietario",
            inmueble.getZona(),
            inmueble.getTipo()});
        }else{     
            modelo.addRow(new Object[]{
                inmueble.getIdInmueble(),
                inmueble.getDireccion(),
                inmueble.getPropietario().getApellido()+" "+inmueble.getPropietario().getNombre(),
                inmueble.getZona(),
                inmueble.getTipo()});
        }    
    }
    
    private void eliminarFilas() {
        int filas = tablaInmuebles.getRowCount() - 1;
        if (filas > -1) {
            for (; filas >= 0; filas--) {
                modelo.removeRow(filas);
            }
        }
    }
    
    private void cargarComboPropietario(){
        
        ArrayList<Propietario> propietarios = propietarioData.listarPropietariosActivosONo(true);
        
        comboPropietario.addItem(null);
        for(Propietario propietario: propietarios){
            comboPropietario.addItem(propietario);
            
        }    
    }
    
    private void vaciarTodo(){
        radioBTodos.setSelected(true);
        campoId.setText("");
        campoDireccion.setText("");
        comboPropietario.setSelectedIndex(0);
        eliminarFilas();
    }
}
