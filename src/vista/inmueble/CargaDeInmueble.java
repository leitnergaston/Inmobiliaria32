/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.inmueble;

import accesoADatos.*;
import entidades.*;
import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import vista.menuPrincipal.MenuPrincipal;

/**
 *
 * @author ale77
 */
public class CargaDeInmueble extends javax.swing.JInternalFrame {
private MenuPrincipal menuPrincipal;
private InmuebleData inmuebleData = new InmuebleData();
private PropietarioData propietarioData = new PropietarioData();
private int aviso = 0;
private final FondoPanel fondo = new FondoPanel();
//private FondoPanel fondo = new FondoPanel();
    
    public CargaDeInmueble(MenuPrincipal menuPrincipal) {
        this.setContentPane(fondo);
        initComponents();
        this.menuPrincipal = menuPrincipal;
        cargarComboPropietario();
        cargarComboTipo();
        cargarComboZona();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkDisponible = new javax.swing.JCheckBox();
        botonBuscar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        botonModificar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        campoDireccion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        campoSuperficie = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        campoPrecio = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        campoId = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboPropietario = new javax.swing.JComboBox<>();
        comboTipo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        comboZona = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setTitle("Datos de Inmueble");

        checkDisponible.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        checkDisponible.setText("Disponible");

        botonBuscar.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconBuscar.png"))); // NOI18N
        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        botonEliminar.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconEliminar.png"))); // NOI18N
        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonSalir.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        botonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconSalir.png"))); // NOI18N
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        botonGuardar.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconGuardar.png"))); // NOI18N
        botonGuardar.setText("Guardar");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });

        botonModificar.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        botonModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconModificar.png"))); // NOI18N
        botonModificar.setText("Modificar");
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(10, 110, 182));
        jLabel2.setText("Carga de inmuebles");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Propietario");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Direcci√≥n");

        campoSuperficie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoSuperficieKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("Tipo");

        campoPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoPrecioKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setText("Superficie");

        campoId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoIdKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setText("Precio");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setText("Id");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setText("Zona");

        jButton1.setFont(new java.awt.Font("Swis721 Hv BT", 0, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconNuevo.png"))); // NOI18N
        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(botonEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(botonModificar)
                        .addGap(18, 18, 18)
                        .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(6, 6, 6)))
                                .addGap(100, 100, 100)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoSuperficie)
                                    .addComponent(campoPrecio)
                                    .addComponent(comboTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboZona, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboPropietario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(campoDireccion)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkDisponible)
                                            .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(36, 36, 36)
                        .addComponent(botonBuscar)))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(campoSuperficie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(campoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(comboZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(checkDisponible)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonSalir)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonModificar)
                        .addComponent(botonGuardar)
                        .addComponent(botonEliminar)
                        .addComponent(jButton1)))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        dispose();
        menuPrincipal.mostrarItemsEscritorio();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        try{
            
            int id = Integer.parseInt(campoId.getText());
            Inmueble inmueble = inmuebleData.buscarInmueble(id);
            if(inmueble==null){
                JOptionPane.showMessageDialog(this, "No existe ning√∫n inmueble con esa Id");
                vaciarCampos();
            }else{
                
                int cantidadPropietarios = comboPropietario.getItemCount();
                for(int i=1; i<cantidadPropietarios; i++){
                    Propietario proCombo = comboPropietario.getItemAt(i);
                    if(proCombo.getIdPropietario()==inmueble.getPropietario().getIdPropietario()){
                        comboPropietario.setSelectedIndex(i);
                    }
                }
                campoDireccion.setText(inmueble.getDireccion());
                int cantidadTipos = comboTipo.getItemCount();
                for(int i=1; i<cantidadTipos; i++){
                    
                    if(inmueble.getTipo().equalsIgnoreCase(comboTipo.getItemAt(i))){
                        comboTipo.setSelectedIndex(i);
                    }
                }
                campoSuperficie.setText(inmueble.getSuperficie()+"");
                campoPrecio.setText(inmueble.getPrecio()+"");
                int cantidadZonas = comboZona.getItemCount();
                for(int i=1; i<cantidadZonas; i++){
                    if(inmueble.getZona().equalsIgnoreCase(comboZona.getItemAt(i))){
                        comboZona.setSelectedIndex(i);
                    }
                }
                if(inmueble.isDisponible()){
                    checkDisponible.setSelected(true);
                }else{
                    checkDisponible.setSelected(false);
                }
                
            }
        }catch(NumberFormatException ex){
            if(campoId.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Para buscar debe llenar el campo de Id");  
            }
        }    
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void campoIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoIdKeyTyped
        
        int key = evt.getKeyChar();
        boolean numero = key >= 48 && key <= 57 || key == 8;
        if (!numero) {
            evt.consume();
            aviso++;
            if (aviso == 5) {
                JOptionPane.showMessageDialog(this, "Solo se permiten numeros en este campo");
                aviso = 0;
            }
        }
        
    }//GEN-LAST:event_campoIdKeyTyped

    private void campoPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPrecioKeyTyped
        
        int key = evt.getKeyChar();
        boolean numero;
        if(campoPrecio.getText().contains(".")){
            numero = key >= 48 && key <= 57 || key == 8; 
        }
        else{
            numero = key >= 48 && key <= 57 || key == 46 || key == 8;
        }
        if (!numero) {
            evt.consume();
            aviso++;
            if (aviso == 5) {
                JOptionPane.showMessageDialog(this, "En este campo solo puede ingresar n√∫meros enteros o n√∫meros decimales");
                aviso = 0;
            }
        }
    }//GEN-LAST:event_campoPrecioKeyTyped

    private void campoSuperficieKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoSuperficieKeyTyped
        
        int key = evt.getKeyChar();
        boolean numero;
        if(campoSuperficie.getText().contains(".")){
            numero = key >= 48 && key <= 57 || key == 8; 
        }
        else{
            numero = key >= 48 && key <= 57 || key == 46 || key == 8;
        }
        if (!numero) {
            evt.consume();
            aviso++;
            if (aviso == 5) {
                JOptionPane.showMessageDialog(this, "En este campo solo puede ingresar n√∫meros enteros o n√∫meros decimales");
                aviso = 0;
            }
        }
    }//GEN-LAST:event_campoSuperficieKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        vaciarCampos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        try{
              
            if(comboPropietario.getSelectedIndex()<1 || comboTipo.getSelectedIndex()<1 || comboZona.getSelectedIndex()<1){
                JOptionPane.showMessageDialog(this, "No deje campos vac√≠os");
            }else if(campoDireccion.getText().isEmpty() || campoSuperficie.getText().isEmpty() || campoPrecio.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "No deje campos vac√≠os");
            }else{
                
                Propietario propietario = (Propietario)comboPropietario.getSelectedItem();
                String direccion = campoDireccion.getText();
                String tipo = (String)comboTipo.getSelectedItem();
                double superficie = Double.parseDouble(campoSuperficie.getText());
                double precio = Double.parseDouble(campoPrecio.getText());
                String zona = (String)comboZona.getSelectedItem();
                boolean disponible = false;
                if(checkDisponible.isSelected()){
                    disponible = true;
                }
                
                Inmueble inmueble = new Inmueble(propietario, direccion, tipo, superficie, precio, zona, disponible);
                
                inmuebleData.crearInmueble(inmueble);
                
                campoId.setText(inmueble.getIdInmueble()+"");
            }
            
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Para poder guardar un inmueble debe llenar todos los campos menos el de Id");
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        if(campoId.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Para eliminar debe seleccionar la Id correspondiente");
        }else{
            int id = Integer.parseInt(campoId.getText());
            inmuebleData.eliminarInmueble(id);
            checkDisponible.setSelected(false);
        }
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarActionPerformed
        try{
            if(campoId.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Para modificar un inmueble primero tiene que buscar un inmueble por el Id"); 
            }else if(comboPropietario.getSelectedIndex()<1 || comboTipo.getSelectedIndex()<1 || comboZona.getSelectedIndex()<1){
                JOptionPane.showMessageDialog(this, "No deje campos vac√≠os");
            }else if(campoDireccion.getText().isEmpty() || campoSuperficie.getText().isEmpty() || campoPrecio.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "No deje campos vac√≠os");
            }else{
                
                int id = Integer.parseInt(campoId.getText());
                Propietario propietario = (Propietario)comboPropietario.getSelectedItem();              
                String direccion = campoDireccion.getText();
                String tipo = (String)comboTipo.getSelectedItem();
                double superficie = Double.parseDouble(campoSuperficie.getText());
                double precio = Double.parseDouble(campoPrecio.getText());
                String zona = (String)comboZona.getSelectedItem();
                boolean disponible = false;
                if(checkDisponible.isSelected()){
                    disponible = true;
                }
                
                Inmueble inmueble = new Inmueble(id, propietario, direccion, tipo, superficie, precio, zona, disponible);
                
                inmuebleData.modificarInmueble(inmueble);
                   
            }
            
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Para poder modificar un inmueble debe llenar todos los campos");
        }
    }//GEN-LAST:event_botonModificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonModificar;
    private javax.swing.JButton botonSalir;
    private javax.swing.JTextField campoDireccion;
    private javax.swing.JTextField campoId;
    private javax.swing.JTextField campoPrecio;
    private javax.swing.JTextField campoSuperficie;
    private javax.swing.JCheckBox checkDisponible;
    private javax.swing.JComboBox<Propietario> comboPropietario;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JComboBox<String> comboZona;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables

    private void cargarComboPropietario(){
        
        ArrayList<Propietario> propietarios = propietarioData.listarPropietarios();
        
        comboPropietario.addItem(null);
        for(Propietario propietario: propietarios){
            comboPropietario.addItem(propietario);
            
        }    
    }
    
    private void cargarComboTipo(){
        
        comboTipo.addItem(null);
        comboTipo.addItem("Local");
        comboTipo.addItem("Dep√≥sito");
        comboTipo.addItem("Oficina");
        comboTipo.addItem("Casa");
        comboTipo.addItem("Departamento");
    }
    
    private void cargarComboZona(){
        comboZona.addItem(null);
        comboZona.addItem("Centro");
        comboZona.addItem("Norte");
        comboZona.addItem("Oeste");
        comboZona.addItem("Este");
        comboZona.addItem("Sur");
    }

    private void vaciarCampos(){
        campoId.setText("");
        comboPropietario.setSelectedIndex(0);
        campoDireccion.setText("");
        comboTipo.setSelectedIndex(0);
        campoSuperficie.setText("");
        campoPrecio.setText("");
        comboZona.setSelectedIndex(0);
        checkDisponible.setSelected(false);
    }
    
    private class FondoPanel extends JPanel{
    
        private Image imagen;
        
        @Override
        public void paint(Graphics g){
            imagen = new ImageIcon(getClass().getResource("/images/fondo4.jpg")).getImage();
            g.drawImage(imagen,0,0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        
        }
    
    }  
}
